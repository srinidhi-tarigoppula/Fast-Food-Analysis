import pandas as pd
mcdonalds = pd.read_csv('mcdonalds.csv')
mcdonalds.columns
mcdonalds.shape
mcdonalds.head(3)

from sklearn.preprocessing import LabelEncoder
def labelling(x):
    mcdonalds[x]=LabelEncoder().fit_transform(mcdonalds[x])
    return mcdonalds
data = mcdonalds.columns[0:11]
for i in data:
    labelling(i)
mcdonalds

mcdonalds_eleven=mcdonalds.loc[:,data]
mcdonalds_eleven

round(mcdonalds_eleven.mean(),2)

MD_x=mcdonalds_eleven.values
MD_x

from sklearn.decomposition import PCA
from sklearn import preprocessing
pca_data=preprocessing.scale(MD_x)
pca=PCA(n_components=11)
pc=pca.fit_transform(MD_x)
names=['PC1','PC2','PC3','PC4','PC5','PC6','PC7','PC8','PC9','PC10','P
C11']
MD_pca=pd.DataFrame(data=pc,columns=names)
MD_pca

pca.explained_variance_ratio_

import numpy as np
np.cumsum(pca.explained_variance_ratio_)

loadings=pca.components_
num_pc=pca.n_features_
pc_list=["PC"+str(i) for i in list(range(1,num_pc+1))]
loadings_df=pd.DataFrame.from_dict(dict(zip(pc_list,loadings)))
loadings_df['variable']=mcdonalds_eleven.columns.values
loadings_df=loadings_df.set_index('variable')
loadings_df

!pip install bioinfokit
from bioinfokit.visuz import cluster
pca_scores=PCA().fit_transform(MD_x)
cluster.biplot(cscore=pca_scores,loadings=loadings,labels=mcdonalds.columns.values,var1=round(pca.explained_variance_ratio_[0]*100,2),var2=round(pca.explained_variance_ratio_[1]*100,2),show=True,dim=(10,5))

from sklearn.cluster import KMeans
kmeans=KMeans(n_clusters=4,init='k-means++',random_state=0).fit(mcdonalds_eleven)
mcdonalds['cluster_num']=kmeans.labels_
print(kmeans.labels_)
print(kmeans.inertia_)
print(kmeans.n_iter_)
print(kmeans.cluster_centers_)

from collections import Counter
Counter(kmeans.labels_)

import seaborn as sns
import matplotlib.pyplot as plt
sns.scatterplot(data=MD_pca,x="PC1",y="PC2",hue=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],
marker="X",c="r",s=80,label="centroids")
plt.legend()
plt.show()

from statsmodels.graphics.mosaicplot import mosaic
from itertools import product
crosstab=pd.crosstab(mcdonalds['cluster_num'],mcdonalds['Like'])
crosstab=crosstab[['I hate it!-5','-4','-3','-2','-
1','0','+1','+2','+3','+4','I love it!+5']]
crosstab

plt.rcParams['figure.figsize']=(7,5)
mosaic(crosstab.stack())
plt.show()

crosstab_gender=pd.crosstab(mcdonalds['cluster_num'],mcdonalds['Gender'])
crosstab_gender

plt.rcParams['figure.figsize']=(7,5)
mosaic(crosstab_gender.stack())
plt.show()

sns.boxplot(x="cluster_num",y="Age",data=mcdonalds)

mcdonalds['VisitFrequency']=LabelEncoder().fit_transform(mcdonalds['VisitFrequency'])
visit=mcdonalds.groupby('cluster_num')['VisitFrequency'].mean()
visit=visit.to_frame().reset_index()
visit

mcdonalds['Like']=LabelEncoder().fit_transform(mcdonalds['Like'])
like=mcdonalds.groupby('cluster_num')['Like'].mean()
like=like.to_frame().reset_index()
like

mcdonalds['Gender']=LabelEncoder().fit_transform(mcdonalds['Gender'])
gender=mcdonalds.groupby('cluster_num')['Gender'].mean()
gender=gender.to_frame().reset_index()
gender

segment=gender.merge(like,on='cluster_num',how='left').merge(visit,on=
'cluster_num',how='left')
segment

plt.figure(figsize=(9,4))
sns.scatterplot(x="VisitFrequency",y="Like",data=segment,s=400,color="
r")
plt.title("Simple segment evaluation plot for the fast food data 
set",fontsize=15)
plt.xlabel("Visit",fontsize=12)
plt.ylabel("Like",fontsize=12)
plt.show()

from pandas.plotting import parallel_coordinates
plt.figure(figsize=(8, 6))
parallel_coordinates(segment, 'cluster_num', colormap='Set1')
plt.xlabel('Variable')
plt.ylabel('Value')
plt.title('Segment Evaluation Parallel Coordinate Plot for the Fast 
Food Data Set')
plt.show()